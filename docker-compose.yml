version: '3.8'

services:
  # Frontend - React приложение
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - REACT_APP_API_URL=http://localhost:${PORT:-3001}
      - REACT_APP_BASE_URL=${BASE_URL}
      - REACT_APP_ENABLE_PWA=${ENABLE_PWA:-true}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - whatsapp-network

  # Backend - Node.js API сервер
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PORT=${PORT:-3001}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_TIMEOUT=${API_TIMEOUT:-30000}
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-whatsapp_client}
      - POSTGRES_USER=${DB_USER:-whatsapp_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-whatsapp_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-whatsapp_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Netdata мониторинг
  netdata:
    image: netdata/netdata:latest
    hostname: whatsapp-client-monitor
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - netdata_config:/etc/netdata
      - netdata_cache:/var/cache/netdata
      - netdata_lib:/var/lib/netdata
    ports:
      - "19999:19999"
    restart: unless-stopped
    networks:
      - whatsapp-network
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
      - NETDATA_CLAIM_ROOMS=
      - NETDATA_CLAIM_URL=https://app.netdata.cloud

  # Nginx reverse proxy (для production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - whatsapp-network

# Volumes для постоянного хранения данных
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  netdata_config:
    driver: local
  netdata_cache:
    driver: local
  netdata_lib:
    driver: local

# Сеть для связи между контейнерами
networks:
  whatsapp-network:
    driver: bridge
