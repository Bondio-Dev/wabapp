require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const NodeCache = require('node-cache');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const GupshupService = require('./src/gupshup');
const AmoService = require('./src/amo');

const app = express();
const PORT = process.env.PORT || 3001;

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 24 —á–∞—Å–∞)
const dialogCache = new NodeCache({ stdTTL: 86400 });

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.use('/public', express.static('public'));
app.use(express.static('public'));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        env: process.env.NODE_ENV || 'development'
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const userAgent = req.get('User-Agent') || '';
    if (userAgent.includes('Mozilla') || userAgent.includes('Chrome')) {
        res.sendFile(__dirname + '/public/index.html');
    } else {
        // API –æ—Ç–≤–µ—Ç –¥–ª—è curl –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        res.json({
            message: 'WhatsApp ‚Üî Gupshup ‚Üî amoCRM MVP',
            version: '1.0.0',
            webInterface: 'http://' + req.get('host') + '/',
            endpoints: {
                health: '/health',
                'send-message': 'POST /api/send-message',
                'gupshup-webhook': 'POST /webhook/gupshup',
                'amo-auth': 'GET /api/amo/auth',
                'amo-callback': 'GET /api/amo/callback',
                'amo-send': 'POST /api/amo/send-from-crm'
            }
        });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gupshup
app.post('/api/send-message', async (req, res) => {
    try {
        const { phone, message } = req.body;

        if (!phone || !message) {
            return res.status(400).json({ 
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã phone –∏ message' 
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gupshup
        const result = await GupshupService.sendMessage(phone, message);

        if (result.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
            const dialogKey = `dialog_${phone.replace(/[^\d]/g, '')}`;
            const dialog = dialogCache.get(dialogKey) || [];
            dialog.push({
                type: 'outgoing',
                message: message,
                timestamp: new Date().toISOString(),
                messageId: result.messageId
            });
            dialogCache.set(dialogKey, dialog);

            // –û–±–Ω–æ–≤–ª—è–µ–º amoCRM
            if (process.env.AMO_ACCESS_TOKEN) {
                await AmoService.addMessageToContact(phone, `üì§ WhatsApp: ${message}`, 'outgoing');
            }
        }

        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message 
        });
    }
});

// Webhook –æ—Ç Gupshup - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/webhook/gupshup', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Gupshup:', JSON.stringify(req.body, null, 2));

        const { type, payload } = req.body;

        if (type === 'message' && payload) {
            const { source, payload: messagePayload } = payload;
            const phone = source;
            const message = messagePayload?.text || '';

            if (phone && message) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
                const dialogKey = `dialog_${phone.replace(/[^\d]/g, '')}`;
                const dialog = dialogCache.get(dialogKey) || [];
                dialog.push({
                    type: 'incoming',
                    message: message,
                    timestamp: new Date().toISOString()
                });
                dialogCache.set(dialogKey, dialog);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ amoCRM
                if (process.env.AMO_ACCESS_TOKEN) {
                    await AmoService.processIncomingMessage(phone, message);
                }

                console.log(`–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${phone}: ${message}`);
            }
        }

        res.status(200).json({ status: 'OK' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook Gupshup:', error);
        res.status(200).json({ status: 'Error', message: error.message });
    }
});

// amoCRM OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.get('/api/amo/auth', (req, res) => {
    try {
        const authUrl = AmoService.getAuthUrl();

        if (process.env.NODE_ENV === 'development') {
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            res.send(`
                <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è amoCRM</h2>
                <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</p>
                <a href="${authUrl}" target="_blank">${authUrl}</a>
                <br><br>
                <p>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ —Å —Ç–æ–∫–µ–Ω–∞–º–∏.</p>
            `);
        } else {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - —Ä–µ–¥–∏—Ä–µ–∫—Ç
            res.redirect(authUrl);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// amoCRM OAuth callback
app.get('/api/amo/callback', async (req, res) => {
    try {
        const { code, state } = req.query;

        if (!code) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
        }

        const tokens = await AmoService.exchangeCodeForTokens(code);

        if (tokens.success) {
            res.send(`
                <h2>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è amoCRM —É—Å–ø–µ—à–Ω–∞!</h2>
                <p>–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.</p>
                <p>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é WhatsApp ‚Üî amoCRM.</p>
                <br>
                <a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            `);
        } else {
            res.status(400).send(`
                <h2>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
                <p>${tokens.error}</p>
                <a href="/api/amo/auth">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
            `);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ callback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ amoCRM
app.post('/api/amo/send-from-crm', async (req, res) => {
    try {
        const { phone, message, contactId, leadId } = req.body;

        if (!phone || !message) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã phone –∏ message' });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Gupshup
        const result = await GupshupService.sendMessage(phone, message);

        if (result.success) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            const dialogKey = `dialog_${phone.replace(/[^\d]/g, '')}`;
            const dialog = dialogCache.get(dialogKey) || [];
            dialog.push({
                type: 'outgoing',
                message: message,
                timestamp: new Date().toISOString(),
                source: 'amocrm'
            });
            dialogCache.set(dialogKey, dialog);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ amoCRM
            if (contactId || leadId) {
                await AmoService.addNote(contactId, leadId, `‚úÖ WhatsApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
            }
        }

        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ amoCRM:', error);
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
app.get('/api/dialog/:phone', (req, res) => {
    try {
        const phone = req.params.phone.replace(/[^\d]/g, '');
        const dialogKey = `dialog_${phone}`;
        const dialog = dialogCache.get(dialogKey) || [];

        res.json({
            phone: req.params.phone,
            messages: dialog,
            total: dialog.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: error.message });
    }
});

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
app.get('/api/dialogs', (req, res) => {
    try {
        const keys = dialogCache.keys();
        const dialogs = [];

        keys.forEach(key => {
            if (key.startsWith('dialog_')) {
                const phone = key.replace('dialog_', '');
                const messages = dialogCache.get(key) || [];
                const lastMessage = messages[messages.length - 1];

                dialogs.push({
                    phone: `+${phone}`,
                    messageCount: messages.length,
                    lastMessage: lastMessage ? {
                        text: lastMessage.message,
                        timestamp: lastMessage.timestamp,
                        type: lastMessage.type
                    } : null
                });
            }
        });

        res.json(dialogs);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({ 
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.path,
        method: req.method
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: err.message
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç –ê–¥—Ä–µ—Å: http://localhost:${PORT}`);
    console.log(`üè• Health check: http://localhost:${PORT}/health`);
    console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è amoCRM: http://localhost:${PORT}/api/amo/auth`);
    console.log(`üìû Webhook Gupshup: http://localhost:${PORT}/webhook/gupshup`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(0);
});
